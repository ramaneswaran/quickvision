{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quickvision Faster Computer Vision. Install Quickvision Install directly from GitHub. Very soon it will be available over PyPi. pip install -q git+https://github.com/Quick-AI/quickvision.git What is Quickvision? Quickvision makes Computer Vision tasks much faster and easier with PyTorch. It provides: - Easy to use torch native API, for fit() , train_step() , val_step() of models. Easily customizable and configurable models with various backbones. A complete torch native interface. All models are nn.Module all the training APIs are optional and not binded to models. A lightning API which helps to accelerate training over multiple GPUs, TPUs. A datasets API to common data format very easily and quickly to torch formats. A minimal package, with very low dependencies. Train your models faster. Quickvision has already implmented the long learning in torch. Quickvision is just Torch!! Quickvision does not make you learn a new library. If you know PyTorch you are good to go!!! Quickvision does not abstract any code from torch, nor implements any custom classes over it. It keeps the data format in Tensor only. You don't need to convert it. Do you want just a model with some backbone configuration? Use model made by us. It's just a nn.Module which has Tensors only Input and Output format. Quickvision provides reference scripts too for training it! Do you want to train your model but not write lengthy loops? Just use our training methods such as fit() , train_step() , val_step() . Do you want multi GPU training but worried about model configuration? Just subclass the PyTorch Lightning model! Implement the train_step , val_step .","title":"Home"},{"location":"#quickvision","text":"Faster Computer Vision.","title":"Quickvision"},{"location":"#install-quickvision","text":"Install directly from GitHub. Very soon it will be available over PyPi. pip install -q git+https://github.com/Quick-AI/quickvision.git","title":"Install Quickvision"},{"location":"#what-is-quickvision","text":"Quickvision makes Computer Vision tasks much faster and easier with PyTorch. It provides: - Easy to use torch native API, for fit() , train_step() , val_step() of models. Easily customizable and configurable models with various backbones. A complete torch native interface. All models are nn.Module all the training APIs are optional and not binded to models. A lightning API which helps to accelerate training over multiple GPUs, TPUs. A datasets API to common data format very easily and quickly to torch formats. A minimal package, with very low dependencies. Train your models faster. Quickvision has already implmented the long learning in torch.","title":"What is Quickvision?"},{"location":"#quickvision-is-just-torch","text":"Quickvision does not make you learn a new library. If you know PyTorch you are good to go!!! Quickvision does not abstract any code from torch, nor implements any custom classes over it. It keeps the data format in Tensor only. You don't need to convert it.","title":"Quickvision is just Torch!!"},{"location":"#do-you-want-just-a-model-with-some-backbone-configuration","text":"Use model made by us. It's just a nn.Module which has Tensors only Input and Output format. Quickvision provides reference scripts too for training it!","title":"Do you want just a model with some backbone configuration?"},{"location":"#do-you-want-to-train-your-model-but-not-write-lengthy-loops","text":"Just use our training methods such as fit() , train_step() , val_step() .","title":"Do you want to train your model but not write lengthy loops?"},{"location":"#do-you-want-multi-gpu-training-but-worried-about-model-configuration","text":"Just subclass the PyTorch Lightning model! Implement the train_step , val_step .","title":"Do you want multi GPU training but worried about model configuration?"},{"location":"contributing/","text":"Contribution Guide Please, follow these steps Step 1: Forking and Installing vision \u200b1. Fork the repo to your own github account. click the Fork button to create your own repo copy under your GitHub account. Once forked, you're responsible for keeping your repo copy up-to-date with the upstream vision repo. \u200b2. Download a copy of your remote username/vision repo to your local machine. This is the working directory where you will make changes: $ git clone https://github.com/Quick-AI/quickvision Install the requirments. You many use miniconda or conda as well. $ pip install -r requirements.txt Install this package in develop mode. Go to Root of this package and run. $ python setup.py develop Step 2: Stay in Sync with the original (upstream) repo Set the upstream to sync with this repo. This will keep you in sync with vision easily. $ git remote add upstream https://github.com/Quick-AI/quickvision Updating your local repo: Pull the upstream (original) repo. $ git checkout master $ git pull upstream master Step 3: Creating a new branch $ git checkout -b feature-name $ git branch master * feature_name: Step 4: Make changes, and commit your file changes Edit files in your favorite editor, and format the code with black # View changes git status # See which files have changed git diff # See changes within files git add path/to/file.md git commit -m \"Your meaningful commit message for the change.\" Add more commits, if necessary. Step 5: Submitting a Pull Request 1. Create a pull request git Upload your local branch to your remote GitHub repo (github.com/username/quickvision) git push After the push completes, a message may display a URL to automatically submit a pull request to the upstream repo. If not, go to the quickvision main repo and GitHub will prompt you to create a pull request. 2. Confirm PR was created: Ensure your pr is listed here Updating a PR: Same as before, normally push changes to your branch and the PR will get automatically updated. git commit -m \"updated the feature\" git push origin <enter-branch-name-same-as-before> Reviewing Your PR Maintainers and other contributors will review your pull request. Please participate in the discussion and make the requested changes. When your pull request is approved, it will be merged into the upstream quickvision repo. note quickvision repository has CI checking. It will automatically check your code for build as well.","title":"Contributing"},{"location":"contributing/#contribution-guide","text":"Please, follow these steps","title":"Contribution Guide"},{"location":"contributing/#step-1-forking-and-installing-vision","text":"\u200b1. Fork the repo to your own github account. click the Fork button to create your own repo copy under your GitHub account. Once forked, you're responsible for keeping your repo copy up-to-date with the upstream vision repo. \u200b2. Download a copy of your remote username/vision repo to your local machine. This is the working directory where you will make changes: $ git clone https://github.com/Quick-AI/quickvision Install the requirments. You many use miniconda or conda as well. $ pip install -r requirements.txt Install this package in develop mode. Go to Root of this package and run. $ python setup.py develop","title":"Step 1: Forking and Installing vision"},{"location":"contributing/#step-2-stay-in-sync-with-the-original-upstream-repo","text":"Set the upstream to sync with this repo. This will keep you in sync with vision easily. $ git remote add upstream https://github.com/Quick-AI/quickvision Updating your local repo: Pull the upstream (original) repo. $ git checkout master $ git pull upstream master","title":"Step 2: Stay in Sync with the original (upstream) repo"},{"location":"contributing/#step-3-creating-a-new-branch","text":"$ git checkout -b feature-name $ git branch master * feature_name:","title":"Step 3: Creating a new branch"},{"location":"contributing/#step-4-make-changes-and-commit-your-file-changes","text":"Edit files in your favorite editor, and format the code with black # View changes git status # See which files have changed git diff # See changes within files git add path/to/file.md git commit -m \"Your meaningful commit message for the change.\" Add more commits, if necessary.","title":"Step 4: Make changes, and commit your file changes"},{"location":"contributing/#step-5-submitting-a-pull-request","text":"","title":"Step 5: Submitting a Pull Request"},{"location":"contributing/#1-create-a-pull-request-git","text":"Upload your local branch to your remote GitHub repo (github.com/username/quickvision) git push After the push completes, a message may display a URL to automatically submit a pull request to the upstream repo. If not, go to the quickvision main repo and GitHub will prompt you to create a pull request.","title":"1. Create a pull request git"},{"location":"contributing/#2-confirm-pr-was-created","text":"Ensure your pr is listed here Updating a PR: Same as before, normally push changes to your branch and the PR will get automatically updated. git commit -m \"updated the feature\" git push origin <enter-branch-name-same-as-before>","title":"2. Confirm PR was created:"},{"location":"contributing/#reviewing-your-pr","text":"Maintainers and other contributors will review your pull request. Please participate in the discussion and make the requested changes. When your pull request is approved, it will be merged into the upstream quickvision repo. note quickvision repository has CI checking. It will automatically check your code for build as well.","title":"Reviewing Your PR"}]}